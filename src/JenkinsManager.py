import json
import re
import os
import toml
import requests
from requests.auth import HTTPBasicAuth
from tqdm import tqdm
from objectbox import Store

from src.models import ConsoleOutput


class JenkinsManager:
    """
    A class to manage Jenkins projects and builds.

    Attributes:
        config (dict): Configuration loaded from a TOML file.
        jenkins_url (str): URL of the Jenkins server.
        username (str): Username for Jenkins authentication.
        api_token (str): API token for Jenkins authentication.
    """

    def __init__(self, config_file):
        """
        Initializes the JenkinsManager with configuration from a TOML file.

        Args:
            config_file (str): Path to the TOML configuration file.
        """
        self.config = toml.load(config_file)
        self.jenkins_url = self.config['jenkins']['url']
        self.username = self.config['jenkins']['username']
        self.api_token = self.config['jenkins']['api_token']
        self.nexus_username = self.config['nexus']['username']
        self.nexus_password = self.config['nexus']['password']

        # Initialize ObjectBox store
        self.store = Store(directory='../data/build_db')
        self.console_output_box = self.store.box(ConsoleOutput)

    def loadALL(self):
        all_console_outputs = self.console_output_box.get_all()
        for output in all_console_outputs:
            print(f"Id: {output.id}")
            print(f"Build Number: {output.build_number}")
            print(f"Project Name: {output.project_name}")
            print(f"Build Date: {output.build_date}")
            print(f"Generated By: {output.generated_by}")
            print(f"Console Output: {output.console_output}")
            print(f"Result: {output.result}")
            print(f"Duration: {output.duration}")
            print(f"Flavour: {output.flavour}")
            print(f"Revision: {output.revision}")
            print(f"APK URL: {output.apk_url}")
            print("\n")

    def list_jenkins_projects(self):
        """
        Lists all Jenkins projects.

        Returns:
            list: A list of project names.
            If an error occurs, returns an empty list and prints an error message.
        """
        try:
            response = requests.get(f"{self.jenkins_url}/api/json", auth=HTTPBasicAuth(self.username, self.api_token))
            response.raise_for_status()
            jenkins_data = response.json()
            projects = jenkins_data.get('jobs', [])
            return [project['name'] for project in projects]
        except requests.exceptions.RequestException as e:
            print(f"Failed to retrieve Jenkins projects: {e}")
            return []

    def get_last_build_report(self, project_name):
        """
        Retrieves the last build report for a specified project.

        Args:
            project_name (str): The name of the Jenkins project.

        Returns:
            dict: The last build report data.
            If an error occurs, returns an empty dictionary and prints an error message.
        """
        try:
            # Get project details
            job_url = f"{self.jenkins_url}/job/{project_name}/api/json"
            job_response = requests.get(job_url, auth=HTTPBasicAuth(self.username, self.api_token))
            job_response.raise_for_status()
            job_data = job_response.json()

            # Get the last build number
            last_build_number = job_data['lastBuild']['number']

            # Get the last build details
            last_build_url = f"{self.jenkins_url}/job/{project_name}/{last_build_number}/api/json"
            last_build_response = requests.get(last_build_url, auth=HTTPBasicAuth(self.username, self.api_token))
            last_build_response.raise_for_status()
            last_build_data = last_build_response.json()

            return last_build_data
        except requests.exceptions.RequestException as e:
            print(f"Failed to retrieve the last build report: {e}")
            return {}

    def get_build_console_output(self, project_name, build_number):
        """
        Retrieves the console output for a specific build number of a project.

        Args:
            project_name (str): The name of the Jenkins project.
            build_number (int): The build number.

        Returns:
            str: The console output text.
            If an error occurs, returns an empty string and prints an error message.
        """
        try:
            console_url = f"{self.jenkins_url}/job/{project_name}/{build_number}/consoleText"
            console_response = requests.get(console_url, auth=HTTPBasicAuth(self.username, self.api_token))
            console_response.raise_for_status()
            return console_response.text
        except requests.exceptions.RequestException as e:
            print(f"Failed to retrieve build console output: {e}")
            return ""

    def write_json_to_file(self, data, data_folder, filename):
        """
        Writes the given data to a JSON file.

        Args:
            data (dict or list): The data to write to the file.
            filename (str): The name of the JSON file.
        """
        try:
            os.makedirs(data_folder, exist_ok=True)
            filepath = os.path.join(data_folder, filename)
            with open(filepath, 'w') as f:
                json.dump(data, f, indent=4)
            print(f"Data successfully written to {filepath}")
        except IOError as e:
            print(f"Failed to write data to {filename}: {e}")

    def extract_apk_url(self, console_output):
        """
        Extracts the APK URL from the console output.

        Args:
            console_output (str): The console output text.

        Returns:
             str: The APK URL if found, otherwise an empty string.
           """
        apk_url_pattern = re.compile(r'https?://\S+\.apk')
        match = apk_url_pattern.search(console_output)
        return match.group(0) if match else ""

    def download_file(self, data_folder, url):
        """
           Downloads a file from the given URL.

           Args:
               url (str): The URL of the file to download.
           """
        try:
            with requests.get(url, auth=HTTPBasicAuth(self.nexus_username, self.nexus_password),
                              stream=True) as response:
                response.raise_for_status()
                total_size = int(response.headers.get('content-length', 0))
                block_size = 1024
                filename = url.split('/')[-1]
                destination = os.path.join(data_folder, filename)
                with open(destination, 'wb') as f, tqdm(
                        total=total_size, unit='iB', unit_scale=True
                ) as bar:
                    for data in response.iter_content(block_size):
                        bar.update(len(data))
                        f.write(data)
            print(f"File successfully downloaded to {destination}")
        except requests.exceptions.RequestException as e:
            print(f"Failed to download file from {url}: {e}")

    def store_console_output(self, build_number, project_name, console_output, last_build_report, apk_url):
        """
           Stores the console output in ObjectBox with the build number as a unique identifier.

           Args:
               last_build_report (dict): The console output text.
               apk_url (str): The APK URL.
           """
        try:
            generated_by = last_build_report['actions'][1]['causes'][0]['userName'] if 'userName' in \
                                                                                       last_build_report['actions'][
                                                                                           1][
                                                                                           'causes'][
                                                                                           0] else "Unknown"
            result = last_build_report['result']
            duration = last_build_report['duration']
            flavour = next(param['value'] for action in last_build_report['actions'] if
                           '_class' in action and action['_class'] == 'hudson.model.ParametersAction' for param in
                           action['parameters'] if param['name'] == 'FLAVOUR')
            revision_msg = last_build_report['changeSet']['items'][0]['msg']
            build_date = last_build_report['changeSet']['items'][0]['date']
            revision = last_build_report['changeSet']['items'][0]['revision']

            console_entry = ConsoleOutput(
                id=int(build_number),
                build_number=str(build_number),
                project_name=str(project_name),
                build_date=str(build_date),
                generated_by=str(generated_by),
                result=str(result),
                duration=str(duration),
                flavour=str(flavour),
                revision=str(revision),
                revision_msg=str(revision_msg),
                console_output=str(console_output),
                apk_url=str(apk_url)
            )
            self.console_output_box.put(console_entry)
            print(f"Console output for build number {build_number} successfully stored.")
        except Exception as e:
            print(f"Failed to store console output: {e}")
